"""
The **employer-admin** microservice
allows Aged Care Providers (*employers*)
to administer their interactions
with Training Providers.

Specifically, it allows them to:

* Create an Enrolment object.
  This creates a unique "permision to enrol"
  in the Aged Care Provider's environment.
  If/When the enrolment occurs in the Training provider's system,
  this object will link the identies between the two systems.
  This enrolment object is created in the Employer's context
  before a training service is procured,
  so that Training Provider has access to an identifier and key
  that they can use to reference the enrolment
  and communicate about it securely.
* Get information about an enrolment (various methods).
  The enrolment object is the Aged Care Provider's interface
  for accessing information about the training service
  provided to an employee/student.

The employer-admin microservice Used in conjunction with the
employer-callback microservice
that allows employers to receive data
from Training Providers, using the identifier and key
preemptively generated by the Aged Care Provider,
using the employer-admin microservice.

Together, these two microservices
can be deployed by an Aged Care Provider
as a proxy for interactions with
one or many Training Providers.
Examples of how to deploy this microservice
(along with the employer-callback)
are documented in the
[Aged Care Provider Deployment Guide](https://acwic-employer-coordinator.readthedocs.io/).

The reference implementation
for this microservice is open source
and avilable at the
[ACWIC GitHub site](https://github.com/ACWIC/employer-admin).

"""
import os

from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware

from app.api.enrolments import router as v1_router

API_GATEWAY_STAGE_PREFIX = os.environ.get("STAGE_PREFIX", default="")
API_GATEWAY_SERVICE_PREFIX = os.environ.get("SERVICE_PREFIX", default="")

app = FastAPI(
    title="Employer Admin API",
    description=__doc__,
    root_path=API_GATEWAY_STAGE_PREFIX,
    openapi_url=API_GATEWAY_SERVICE_PREFIX + "/openapi.json",
    docs_url=API_GATEWAY_SERVICE_PREFIX + "/docs",
)

app.add_middleware(
    CORSMiddleware,
    allow_origins="*",
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(v1_router, prefix=API_GATEWAY_SERVICE_PREFIX)

if __name__ == "__main__":
    # TODO: could be moved into a separate docs-specific entrypoint as
    # this is only called to run docs
    import uvicorn

    uvicorn.run(app)
